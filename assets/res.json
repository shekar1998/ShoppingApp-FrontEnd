IncomingMessage {
    [ server]   _readableState: ReadableState {
    [ server]     objectMode: false,
    [ server]     highWaterMark: 16384,
    [ server]     buffer: BufferList { head: null, tail: null, length: 0 },
    [ server]     length: 0,
    [ server]     pipes: null,
    [ server]     pipesCount: 0,
    [ server]     flowing: true,
    [ server]     ended: true,
    [ server]     endEmitted: true,
    [ server]     reading: false,
    [ server]     sync: false,
    [ server]     needReadable: false,
    [ server]     emittedReadable: false,
    [ server]     readableListening: false,
    [ server]     resumeScheduled: false,
    [ server]     emitClose: true,
    [ server]     autoDestroy: false,
    [ server]     destroyed: false,
    [ server]     defaultEncoding: 'utf8',
    [ server]     awaitDrainWriters: null,
    [ server]     multiAwaitDrain: false,
    [ server]     readingMore: false,
    [ server]     decoder: null,
    [ server]     encoding: null,
    [ server]     [Symbol(kPaused)]: false
    [ server]   },
    [ server]   readable: false,
    [ server]   _events: [Object: null prototype] {
    [ server]     end: [Function: resetHeadersTimeoutOnReqEnd]
    [ server]   },
    [ server]   _eventsCount: 1,
    [ server]   _maxListeners: undefined,
    [ server]   socket: Socket {
    [ server]     connecting: false,
    [ server]     _hadError: false,
    [ server]     _parent: null,
    [ server]     _host: null,
    [ server]     _readableState: ReadableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       buffer: BufferList { head: null, tail: null, length: 0 },
    [ server]       length: 0,
    [ server]       pipes: null,
    [ server]       pipesCount: 0,
    [ server]       flowing: true,
    [ server]       ended: false,
    [ server]       endEmitted: false,
    [ server]       reading: true,
    [ server]       sync: false,
    [ server]       needReadable: true,
    [ server]       emittedReadable: false,
    [ server]       readableListening: false,
    [ server]       resumeScheduled: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       destroyed: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       awaitDrainWriters: null,
    [ server]       multiAwaitDrain: false,
    [ server]       readingMore: false,
    [ server]       decoder: null,
    [ server]       encoding: null,
    [ server]       [Symbol(kPaused)]: false
    [ server]     },
    [ server]     readable: true,
    [ server]     _events: [Object: null prototype] {
    [ server]       end: [Array],
    [ server]       timeout: [Function: socketOnTimeout],
    [ server]       data: [Function: bound socketOnData],
    [ server]       error: [Function: socketOnError],
    [ server]       close: [Array],
    [ server]       drain: [Function: bound socketOnDrain],
    [ server]       resume: [Function: onSocketResume],
    [ server]       pause: [Function: onSocketPause]
    [ server]     },
    [ server]     _eventsCount: 8,
    [ server]     _maxListeners: undefined,
    [ server]     _writableState: WritableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       finalCalled: false,
    [ server]       needDrain: false,
    [ server]       ending: false,
    [ server]       ended: false,
    [ server]       finished: false,
    [ server]       destroyed: false,
    [ server]       decodeStrings: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       length: 0,
    [ server]       writing: false,
    [ server]       corked: 0,
    [ server]       sync: true,
    [ server]       bufferProcessing: false,
    [ server]       onwrite: [Function: bound onwrite],
    [ server]       writecb: null,
    [ server]       writelen: 0,
    [ server]       afterWriteTickInfo: null,
    [ server]       bufferedRequest: null,
    [ server]       lastBufferedRequest: null,
    [ server]       pendingcb: 0,
    [ server]       prefinished: false,
    [ server]       errorEmitted: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       bufferedRequestCount: 0,
    [ server]       corkedRequestsFree: [Object]
    [ server]     },
    [ server]     writable: true,
    [ server]     allowHalfOpen: true,
    [ server]     _sockname: null,
    [ server]     _pendingData: null,
    [ server]     _pendingEncoding: '',
    [ server]     server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     _server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     timeout: 120000,
    [ server]     parser: HTTPParser {
    [ server]       '0': [Function: parserOnHeaders],
    [ server]       '1': [Function: parserOnHeadersComplete],
    [ server]       '2': [Function: parserOnBody],
    [ server]       '3': [Function: parserOnMessageComplete],
    [ server]       '4': [Function: bound onParserExecute],
    [ server]       _headers: [],
    [ server]       _url: '',
    [ server]       socket: [Circular],
    [ server]       incoming: [Circular],
    [ server]       outgoing: null,
    [ server]       maxHeaderPairs: 2000,
    [ server]       _consumed: true,
    [ server]       onIncoming: [Function: bound parserOnIncoming],
    [ server]       parsingHeadersStart: 1637083769393
    [ server]     },
    [ server]     on: [Function: socketListenerWrap],
    [ server]     addListener: [Function: socketListenerWrap],
    [ server]     prependListener: [Function: socketListenerWrap],
    [ server]     _paused: false,
    [ server]     _httpMessage: ServerResponse {
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 1,
    [ server]       _maxListeners: undefined,
    [ server]       outputData: [],
    [ server]       outputSize: 0,
    [ server]       writable: true,
    [ server]       _last: false,
    [ server]       chunkedEncoding: false,
    [ server]       shouldKeepAlive: true,
    [ server]       useChunkedEncodingByDefault: true,
    [ server]       sendDate: true,
    [ server]       _removedConnection: false,
    [ server]       _removedContLen: false,
    [ server]       _removedTE: false,
    [ server]       _contentLength: null,
    [ server]       _hasBody: true,
    [ server]       _trailer: '',
    [ server]       finished: false,
    [ server]       _headerSent: false,
    [ server]       socket: [Circular],
    [ server]       connection: [Circular],
    [ server]       _header: null,
    [ server]       _onPendingData: [Function: bound updateOutgoingData],
    [ server]       _sent100: false,
    [ server]       _expect_continue: false,
    [ server]       req: [Circular],
    [ server]       locals: [Object: null prototype] {},
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(kNeedDrain)]: false,
    [ server]       [Symbol(corked)]: 0,
    [ server]       [Symbol(kOutHeaders)]: [Object: null prototype]
    [ server]     },
    [ server]     [Symbol(asyncId)]: 204,
    [ server]     [Symbol(kHandle)]: TCP {
    [ server]       reading: true,
    [ server]       onconnection: null,
    [ server]       _consumed: true,
    [ server]       [Symbol(owner)]: [Circular]
    [ server]     },
    [ server]     [Symbol(kSetNoDelay)]: false,
    [ server]     [Symbol(lastWriteQueueSize)]: 0,
    [ server]     [Symbol(timeout)]: Timeout {
    [ server]       _idleTimeout: 120000,
    [ server]       _idlePrev: [TimersList],
    [ server]       _idleNext: [TimersList],
    [ server]       _idleStart: 17107,
    [ server]       _onTimeout: [Function: bound ],
    [ server]       _timerArgs: undefined,
    [ server]       _repeat: null,
    [ server]       _destroyed: false,
    [ server]       [Symbol(refed)]: false,
    [ server]       [Symbol(asyncId)]: 205,
    [ server]       [Symbol(triggerId)]: 204
    [ server]     },
    [ server]     [Symbol(kBuffer)]: null,
    [ server]     [Symbol(kBufferCb)]: null,
    [ server]     [Symbol(kBufferGen)]: null,
    [ server]     [Symbol(kCapture)]: false,
    [ server]     [Symbol(kBytesRead)]: 0,
    [ server]     [Symbol(kBytesWritten)]: 0
    [ server]   },
    [ server]   connection: Socket {
    [ server]     connecting: false,
    [ server]     _hadError: false,
    [ server]     _parent: null,
    [ server]     _host: null,
    [ server]     _readableState: ReadableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       buffer: BufferList { head: null, tail: null, length: 0 },
    [ server]       length: 0,
    [ server]       pipes: null,
    [ server]       pipesCount: 0,
    [ server]       flowing: true,
    [ server]       ended: false,
    [ server]       endEmitted: false,
    [ server]       reading: true,
    [ server]       sync: false,
    [ server]       needReadable: true,
    [ server]       emittedReadable: false,
    [ server]       readableListening: false,
    [ server]       resumeScheduled: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       destroyed: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       awaitDrainWriters: null,
    [ server]       multiAwaitDrain: false,
    [ server]       readingMore: false,
    [ server]       decoder: null,
    [ server]       encoding: null,
    [ server]       [Symbol(kPaused)]: false
    [ server]     },
    [ server]     readable: true,
    [ server]     _events: [Object: null prototype] {
    [ server]       end: [Array],
    [ server]       timeout: [Function: socketOnTimeout],
    [ server]       data: [Function: bound socketOnData],
    [ server]       error: [Function: socketOnError],
    [ server]       close: [Array],
    [ server]       drain: [Function: bound socketOnDrain],
    [ server]       resume: [Function: onSocketResume],
    [ server]       pause: [Function: onSocketPause]
    [ server]     },
    [ server]     _eventsCount: 8,
    [ server]     _maxListeners: undefined,
    [ server]     _writableState: WritableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       finalCalled: false,
    [ server]       needDrain: false,
    [ server]       ending: false,
    [ server]       ended: false,
    [ server]       finished: false,
    [ server]       destroyed: false,
    [ server]       decodeStrings: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       length: 0,
    [ server]       writing: false,
    [ server]       corked: 0,
    [ server]       sync: true,
    [ server]       bufferProcessing: false,
    [ server]       onwrite: [Function: bound onwrite],
    [ server]       writecb: null,
    [ server]       writelen: 0,
    [ server]       afterWriteTickInfo: null,
    [ server]       bufferedRequest: null,
    [ server]       lastBufferedRequest: null,
    [ server]       pendingcb: 0,
    [ server]       prefinished: false,
    [ server]       errorEmitted: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       bufferedRequestCount: 0,
    [ server]       corkedRequestsFree: [Object]
    [ server]     },
    [ server]     writable: true,
    [ server]     allowHalfOpen: true,
    [ server]     _sockname: null,
    [ server]     _pendingData: null,
    [ server]     _pendingEncoding: '',
    [ server]     server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     _server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     timeout: 120000,
    [ server]     parser: HTTPParser {
    [ server]       '0': [Function: parserOnHeaders],
    [ server]       '1': [Function: parserOnHeadersComplete],
    [ server]       '2': [Function: parserOnBody],
    [ server]       '3': [Function: parserOnMessageComplete],
    [ server]       '4': [Function: bound onParserExecute],
    [ server]       _headers: [],
    [ server]       _url: '',
    [ server]       socket: [Circular],
    [ server]       incoming: [Circular],
    [ server]       outgoing: null,
    [ server]       maxHeaderPairs: 2000,
    [ server]       _consumed: true,
    [ server]       onIncoming: [Function: bound parserOnIncoming],
    [ server]       parsingHeadersStart: 1637083769393
    [ server]     },
    [ server]     on: [Function: socketListenerWrap],
    [ server]     addListener: [Function: socketListenerWrap],
    [ server]     prependListener: [Function: socketListenerWrap],
    [ server]     _paused: false,
    [ server]     _httpMessage: ServerResponse {
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 1,
    [ server]       _maxListeners: undefined,
    [ server]       outputData: [],
    [ server]       outputSize: 0,
    [ server]       writable: true,
    [ server]       _last: false,
    [ server]       chunkedEncoding: false,
    [ server]       shouldKeepAlive: true,
    [ server]       useChunkedEncodingByDefault: true,
    [ server]       sendDate: true,
    [ server]       _removedConnection: false,
    [ server]       _removedContLen: false,
    [ server]       _removedTE: false,
    [ server]       _contentLength: null,
    [ server]       _hasBody: true,
    [ server]       _trailer: '',
    [ server]       finished: false,
    [ server]       _headerSent: false,
    [ server]       socket: [Circular],
    [ server]       connection: [Circular],
    [ server]       _header: null,
    [ server]       _onPendingData: [Function: bound updateOutgoingData],
    [ server]       _sent100: false,
    [ server]       _expect_continue: false,
    [ server]       req: [Circular],
    [ server]       locals: [Object: null prototype] {},
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(kNeedDrain)]: false,
    [ server]       [Symbol(corked)]: 0,
    [ server]       [Symbol(kOutHeaders)]: [Object: null prototype]
    [ server]     },
    [ server]     [Symbol(asyncId)]: 204,
    [ server]     [Symbol(kHandle)]: TCP {
    [ server]       reading: true,
    [ server]       onconnection: null,
    [ server]       _consumed: true,
    [ server]       [Symbol(owner)]: [Circular]
    [ server]     },
    [ server]     [Symbol(kSetNoDelay)]: false,
    [ server]     [Symbol(lastWriteQueueSize)]: 0,
    [ server]     [Symbol(timeout)]: Timeout {
    [ server]       _idleTimeout: 120000,
    [ server]       _idlePrev: [TimersList],
    [ server]       _idleNext: [TimersList],
    [ server]       _idleStart: 17107,
    [ server]       _onTimeout: [Function: bound ],
    [ server]       _timerArgs: undefined,
    [ server]       _repeat: null,
    [ server]       _destroyed: false,
    [ server]       [Symbol(refed)]: false,
    [ server]       [Symbol(asyncId)]: 205,
    [ server]       [Symbol(triggerId)]: 204
    [ server]     },
    [ server]     [Symbol(kBuffer)]: null,
    [ server]     [Symbol(kBufferCb)]: null,
    [ server]     [Symbol(kBufferGen)]: null,
    [ server]     [Symbol(kCapture)]: false,
    [ server]     [Symbol(kBytesRead)]: 0,
    [ server]     [Symbol(kBytesWritten)]: 0
    [ server]   },
    [ server]   httpVersionMajor: 1,
    [ server]   httpVersionMinor: 1,
    [ server]   httpVersion: '1.1',
    [ server]   complete: true,
    [ server]   headers: {
    [ server]     accept: 'application/json',
    [ server]     authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTYzZTkzZWE4NzNlOTFiZTBjZTNjYjkiLCJpc0FkbWluIjp0cnVlLCJpYXQiOjE2MzcwODI1MDUsImV4cCI6MTYzNzE2ODkwNX0.D9Ub-A_P8r3ND8nfkyw10B4ebPwuzzICTee-aR0IAeY',
    [ server]     'content-type': 'application/json',
    [ server]     'content-length': '207',
    [ server]     host: '192.168.0.108:4000',
    [ server]     connection: 'Keep-Alive',
    [ server]     'accept-encoding': 'gzip',
    [ server]     'user-agent': 'okhttp/4.9.1'
    [ server]   },
    [ server]   rawHeaders: [
    [ server]     'accept',
    [ server]     'application/json',
    [ server]     'authorization',
    [ server]     'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTYzZTkzZWE4NzNlOTFiZTBjZTNjYjkiLCJpc0FkbWluIjp0cnVlLCJpYXQiOjE2MzcwODI1MDUsImV4cCI6MTYzNzE2ODkwNX0.D9Ub-A_P8r3ND8nfkyw10B4ebPwuzzICTee-aR0IAeY',      
    [ server]     'Content-Type',
    [ server]     'application/json',
    [ server]     'Content-Length',
    [ server]     '207',
    [ server]     'Host',
    [ server]     '192.168.0.108:4000',
    [ server]     'Connection',
    [ server]     'Keep-Alive',
    [ server]     'Accept-Encoding',
    [ server]     'gzip',
    [ server]     'User-Agent',
    [ server]     'okhttp/4.9.1'
    [ server]   ],
    [ server]   trailers: {},
    [ server]   rawTrailers: [],
    [ server]   aborted: false,
    [ server]   upgrade: false,
    [ server]   url: '/createProduct',
    [ server]   method: 'POST',
    [ server]   statusCode: null,
    [ server]   statusMessage: null,
    [ server]   client: Socket {
    [ server]     connecting: false,
    [ server]     _hadError: false,
    [ server]     _parent: null,
    [ server]     _host: null,
    [ server]     _readableState: ReadableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       buffer: BufferList { head: null, tail: null, length: 0 },
    [ server]       length: 0,
    [ server]       pipes: null,
    [ server]       pipesCount: 0,
    [ server]       flowing: true,
    [ server]       ended: false,
    [ server]       endEmitted: false,
    [ server]       reading: true,
    [ server]       sync: false,
    [ server]       needReadable: true,
    [ server]       emittedReadable: false,
    [ server]       readableListening: false,
    [ server]       resumeScheduled: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       destroyed: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       awaitDrainWriters: null,
    [ server]       multiAwaitDrain: false,
    [ server]       readingMore: false,
    [ server]       decoder: null,
    [ server]       encoding: null,
    [ server]       [Symbol(kPaused)]: false
    [ server]     },
    [ server]     readable: true,
    [ server]     _events: [Object: null prototype] {
    [ server]       end: [Array],
    [ server]       timeout: [Function: socketOnTimeout],
    [ server]       data: [Function: bound socketOnData],
    [ server]       error: [Function: socketOnError],
    [ server]       close: [Array],
    [ server]       drain: [Function: bound socketOnDrain],
    [ server]       resume: [Function: onSocketResume],
    [ server]       pause: [Function: onSocketPause]
    [ server]     },
    [ server]     _eventsCount: 8,
    [ server]     _maxListeners: undefined,
    [ server]     _writableState: WritableState {
    [ server]       objectMode: false,
    [ server]       highWaterMark: 16384,
    [ server]       finalCalled: false,
    [ server]       needDrain: false,
    [ server]       ending: false,
    [ server]       ended: false,
    [ server]       finished: false,
    [ server]       destroyed: false,
    [ server]       decodeStrings: false,
    [ server]       defaultEncoding: 'utf8',
    [ server]       length: 0,
    [ server]       writing: false,
    [ server]       corked: 0,
    [ server]       sync: true,
    [ server]       bufferProcessing: false,
    [ server]       onwrite: [Function: bound onwrite],
    [ server]       writecb: null,
    [ server]       writelen: 0,
    [ server]       afterWriteTickInfo: null,
    [ server]       bufferedRequest: null,
    [ server]       lastBufferedRequest: null,
    [ server]       pendingcb: 0,
    [ server]       prefinished: false,
    [ server]       errorEmitted: false,
    [ server]       emitClose: false,
    [ server]       autoDestroy: false,
    [ server]       bufferedRequestCount: 0,
    [ server]       corkedRequestsFree: [Object]
    [ server]     },
    [ server]     writable: true,
    [ server]     allowHalfOpen: true,
    [ server]     _sockname: null,
    [ server]     _pendingData: null,
    [ server]     _pendingEncoding: '',
    [ server]     server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     _server: Server {
    [ server]       insecureHTTPParser: undefined,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 2,
    [ server]       _maxListeners: undefined,
    [ server]       _connections: 1,
    [ server]       _handle: [TCP],
    [ server]       _usingWorkers: false,
    [ server]       _workers: [],
    [ server]       _unref: false,
    [ server]       allowHalfOpen: true,
    [ server]       pauseOnConnect: false,
    [ server]       httpAllowHalfOpen: false,
    [ server]       timeout: 120000,
    [ server]       keepAliveTimeout: 5000,
    [ server]       maxHeadersCount: null,
    [ server]       headersTimeout: 60000,
    [ server]       _connectionKey: '6::::4000',
    [ server]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [ server]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(asyncId)]: 127
    [ server]     },
    [ server]     timeout: 120000,
    [ server]     parser: HTTPParser {
    [ server]       '0': [Function: parserOnHeaders],
    [ server]       '1': [Function: parserOnHeadersComplete],
    [ server]       '2': [Function: parserOnBody],
    [ server]       '3': [Function: parserOnMessageComplete],
    [ server]       '4': [Function: bound onParserExecute],
    [ server]       _headers: [],
    [ server]       _url: '',
    [ server]       socket: [Circular],
    [ server]       incoming: [Circular],
    [ server]       outgoing: null,
    [ server]       maxHeaderPairs: 2000,
    [ server]       _consumed: true,
    [ server]       onIncoming: [Function: bound parserOnIncoming],
    [ server]       parsingHeadersStart: 1637083769393
    [ server]     },
    [ server]     on: [Function: socketListenerWrap],
    [ server]     addListener: [Function: socketListenerWrap],
    [ server]     prependListener: [Function: socketListenerWrap],
    [ server]     _paused: false,
    [ server]     _httpMessage: ServerResponse {
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 1,
    [ server]       _maxListeners: undefined,
    [ server]       outputData: [],
    [ server]       outputSize: 0,
    [ server]       writable: true,
    [ server]       _last: false,
    [ server]       chunkedEncoding: false,
    [ server]       shouldKeepAlive: true,
    [ server]       useChunkedEncodingByDefault: true,
    [ server]       sendDate: true,
    [ server]       _removedConnection: false,
    [ server]       _removedContLen: false,
    [ server]       _removedTE: false,
    [ server]       _contentLength: null,
    [ server]       _hasBody: true,
    [ server]       _trailer: '',
    [ server]       finished: false,
    [ server]       _headerSent: false,
    [ server]       socket: [Circular],
    [ server]       connection: [Circular],
    [ server]       _header: null,
    [ server]       _onPendingData: [Function: bound updateOutgoingData],
    [ server]       _sent100: false,
    [ server]       _expect_continue: false,
    [ server]       req: [Circular],
    [ server]       locals: [Object: null prototype] {},
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(kNeedDrain)]: false,
    [ server]       [Symbol(corked)]: 0,
    [ server]       [Symbol(kOutHeaders)]: [Object: null prototype]
    [ server]     },
    [ server]     [Symbol(asyncId)]: 204,
    [ server]     [Symbol(kHandle)]: TCP {
    [ server]       reading: true,
    [ server]       onconnection: null,
    [ server]       _consumed: true,
    [ server]       [Symbol(owner)]: [Circular]
    [ server]     },
    [ server]     [Symbol(kSetNoDelay)]: false,
    [ server]     [Symbol(lastWriteQueueSize)]: 0,
    [ server]     [Symbol(timeout)]: Timeout {
    [ server]       _idleTimeout: 120000,
    [ server]       _idlePrev: [TimersList],
    [ server]       _idleNext: [TimersList],
    [ server]       _idleStart: 17107,
    [ server]       _onTimeout: [Function: bound ],
    [ server]       _timerArgs: undefined,
    [ server]       _repeat: null,
    [ server]       _destroyed: false,
    [ server]       [Symbol(refed)]: false,
    [ server]       [Symbol(asyncId)]: 205,
    [ server]       [Symbol(triggerId)]: 204
    [ server]     },
    [ server]     [Symbol(kBuffer)]: null,
    [ server]     [Symbol(kBufferCb)]: null,
    [ server]     [Symbol(kBufferGen)]: null,
    [ server]     [Symbol(kCapture)]: false,
    [ server]     [Symbol(kBytesRead)]: 0,
    [ server]     [Symbol(kBytesWritten)]: 0
    [ server]   },
    [ server]   _consuming: true,
    [ server]   _dumped: false,
    [ server]   next: [Function: next],
    [ server]   baseUrl: '/api/v1/products',
    [ server]   originalUrl: '/api/v1/products/createProduct',
    [ server]   _parsedUrl: Url {
    [ server]     protocol: null,
    [ server]     slashes: null,
    [ server]     auth: null,
    [ server]     host: null,
    [ server]     port: null,
    [ server]     hostname: null,
    [ server]     hash: null,
    [ server]     search: null,
    [ server]     query: null,
    [ server]     pathname: '/createProduct',
    [ server]     path: '/createProduct',
    [ server]     href: '/createProduct',
    [ server]     _raw: '/createProduct'
    [ server]   },
    [ server]   params: {},
    [ server]   query: {},
    [ server]   res: ServerResponse {
    [ server]     _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    [ server]     _eventsCount: 1,
    [ server]     _maxListeners: undefined,
    [ server]     outputData: [],
    [ server]     outputSize: 0,
    [ server]     writable: true,
    [ server]     _last: false,
    [ server]     chunkedEncoding: false,
    [ server]     shouldKeepAlive: true,
    [ server]     useChunkedEncodingByDefault: true,
    [ server]     sendDate: true,
    [ server]     _removedConnection: false,
    [ server]     _removedContLen: false,
    [ server]     _removedTE: false,
    [ server]     _contentLength: null,
    [ server]     _hasBody: true,
    [ server]     _trailer: '',
    [ server]     finished: false,
    [ server]     _headerSent: false,
    [ server]     socket: Socket {
    [ server]       connecting: false,
    [ server]       _hadError: false,
    [ server]       _parent: null,
    [ server]       _host: null,
    [ server]       _readableState: [ReadableState],
    [ server]       readable: true,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 8,
    [ server]       _maxListeners: undefined,
    [ server]       _writableState: [WritableState],
    [ server]       writable: true,
    [ server]       allowHalfOpen: true,
    [ server]       _sockname: null,
    [ server]       _pendingData: null,
    [ server]       _pendingEncoding: '',
    [ server]       server: [Server],
    [ server]       _server: [Server],
    [ server]       timeout: 120000,
    [ server]       parser: [HTTPParser],
    [ server]       on: [Function: socketListenerWrap],
    [ server]       addListener: [Function: socketListenerWrap],
    [ server]       prependListener: [Function: socketListenerWrap],
    [ server]       _paused: false,
    [ server]       _httpMessage: [Circular],
    [ server]       [Symbol(asyncId)]: 204,
    [ server]       [Symbol(kHandle)]: [TCP],
    [ server]       [Symbol(kSetNoDelay)]: false,
    [ server]       [Symbol(lastWriteQueueSize)]: 0,
    [ server]       [Symbol(timeout)]: Timeout {
    [ server]         _idleTimeout: 120000,
    [ server]         _idlePrev: [TimersList],
    [ server]         _idleNext: [TimersList],
    [ server]         _idleStart: 17107,
    [ server]         _onTimeout: [Function: bound ],
    [ server]         _timerArgs: undefined,
    [ server]         _repeat: null,
    [ server]         _destroyed: false,
    [ server]         [Symbol(refed)]: false,
    [ server]         [Symbol(asyncId)]: 205,
    [ server]         [Symbol(triggerId)]: 204
    [ server]       },
    [ server]       [Symbol(kBuffer)]: null,
    [ server]       [Symbol(kBufferCb)]: null,
    [ server]       [Symbol(kBufferGen)]: null,
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(kBytesRead)]: 0,
    [ server]       [Symbol(kBytesWritten)]: 0
    [ server]     },
    [ server]     connection: Socket {
    [ server]       connecting: false,
    [ server]       _hadError: false,
    [ server]       _parent: null,
    [ server]       _host: null,
    [ server]       _readableState: [ReadableState],
    [ server]       readable: true,
    [ server]       _events: [Object: null prototype],
    [ server]       _eventsCount: 8,
    [ server]       _maxListeners: undefined,
    [ server]       _writableState: [WritableState],
    [ server]       writable: true,
    [ server]       allowHalfOpen: true,
    [ server]       _sockname: null,
    [ server]       _pendingData: null,
    [ server]       _pendingEncoding: '',
    [ server]       server: [Server],
    [ server]       _server: [Server],
    [ server]       timeout: 120000,
    [ server]       parser: [HTTPParser],
    [ server]       on: [Function: socketListenerWrap],
    [ server]       addListener: [Function: socketListenerWrap],
    [ server]       prependListener: [Function: socketListenerWrap],
    [ server]       _paused: false,
    [ server]       _httpMessage: [Circular],
    [ server]       [Symbol(asyncId)]: 204,
    [ server]       [Symbol(kHandle)]: [TCP],
    [ server]       [Symbol(kSetNoDelay)]: false,
    [ server]       [Symbol(lastWriteQueueSize)]: 0,
    [ server]       [Symbol(timeout)]: Timeout {
    [ server]         _idleTimeout: 120000,
    [ server]         _idlePrev: [TimersList],
    [ server]         _idleNext: [TimersList],
    [ server]         _idleStart: 17107,
    [ server]         _onTimeout: [Function: bound ],
    [ server]         _timerArgs: undefined,
    [ server]         _repeat: null,
    [ server]         _destroyed: false,
    [ server]         [Symbol(refed)]: false,
    [ server]         [Symbol(asyncId)]: 205,
    [ server]         [Symbol(triggerId)]: 204
    [ server]       },
    [ server]       [Symbol(kBuffer)]: null,
    [ server]       [Symbol(kBufferCb)]: null,
    [ server]       [Symbol(kBufferGen)]: null,
    [ server]       [Symbol(kCapture)]: false,
    [ server]       [Symbol(kBytesRead)]: 0,
    [ server]       [Symbol(kBytesWritten)]: 0
    [ server]     },
    [ server]     _header: null,
    [ server]     _onPendingData: [Function: bound updateOutgoingData],
    [ server]     _sent100: false,
    [ server]     _expect_continue: false,
    [ server]     req: [Circular],
    [ server]     locals: [Object: null prototype] {},
    [ server]     [Symbol(kCapture)]: false,
    [ server]     [Symbol(kNeedDrain)]: false,
    [ server]     [Symbol(corked)]: 0,
    [ server]     [Symbol(kOutHeaders)]: [Object: null prototype] {
    [ server]       'x-powered-by': [Array],
    [ server]       vary: [Array],
    [ server]       'access-control-allow-credentials': [Array],
    [ server]       'access-control-expose-headers': [Array]
    [ server]     }
    [ server]   },
    [ server]   body: [
    [ server]     [ 'image', [Object] ],
    [ server]     [ 'name', 'SBBBB' ],
    [ server]     [ 'brand', '54' ],
    [ server]     [ 'price', '54' ],
    [ server]     [ 'description', 'DDF' ],
    [ server]     [ 'category', '617f88804767637770e8b6fc' ],
    [ server]     [ 'countInStock', '34' ],
    [ server]     [ 'images', [] ]
    [ server]   ],
    [ server]   _body: true,
    [ server]   length: undefined,
    [ server]   user: {
    [ server]     userId: '6163e93ea873e91be0ce3cb9',
    [ server]     isAdmin: true,
    [ server]     iat: 1637082505,
    [ server]     exp: 1637168905
    [ server]   },
    [ server]   route: Route {
    [ server]     path: '/createProduct',
    [ server]     stack: [ [Layer], [Layer] ],
    [ server]     methods: { post: true }
    [ server]   },
    [ server]   [Symbol(kCapture)]: false
    [ server] }